# -*- coding: utf-8 -*-
"""
Script d'Extraction du Meilleur Mod√®le depuis MLflow
====================================================

Objectif: Extraire le mod√®le entra√Æn√© par Wa√Ø depuis MLflow et le sauvegarder
         dans le dossier artifacts/ pour utilisation par l'application Streamlit.

√âquipe: Alexandre, Patricia, Wa√Ø, Jiwon
Universit√© Paris 1 Panth√©on-Sorbonne
"""

import mlflow
import mlflow.sklearn
import joblib
from pathlib import Path

# =============================================================================
# CONFIGURATION
# =============================================================================

# Run ID fourni par Wa√Ø (mod√®le en production sur MLflow)
RUN_ID = "1da74295cd0b42b28feb9289314db4f8"

# Chemin du tracking MLflow (adapter selon votre configuration)
MLFLOW_TRACKING_URI = "file:///C:/Users/infor/OneDrive/Î¨∏ÏÑú/GitHub/Projet_MLOps-GenAI/mlruns"

# Dossier de sortie pour le mod√®le
OUTPUT_DIR = "artifacts"
OUTPUT_FILE = "best_model.joblib"

# =============================================================================
# EXTRACTION DU MOD√àLE
# =============================================================================

def extraire_modele():
    """
    Extrait le mod√®le depuis MLflow et le sauvegarde localement.
    
    Returns:
        bool: True si succ√®s, False si √©chec
    """
    
    print("=" * 60)
    print("üîç EXTRACTION DU MOD√àLE DEPUIS MLFLOW")
    print("=" * 60)
    
    try:
        # Configuration de l'URI de tracking MLflow
        print(f"\nüìç Configuration MLflow Tracking URI...")
        mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)
        print(f"   URI: {MLFLOW_TRACKING_URI}")
        
        # Chargement du mod√®le depuis MLflow
        print(f"\nüîÑ Chargement du mod√®le (Run ID: {RUN_ID})...")
        model_uri = f"runs:/{RUN_ID}/model"
        model = mlflow.sklearn.load_model(model_uri)
        
        print(f"‚úÖ Mod√®le charg√© avec succ√®s!")
        print(f"   Type: {type(model).__name__}")
        
        # Cr√©ation du dossier artifacts s'il n'existe pas
        print(f"\nüìÅ Cr√©ation du dossier de sortie...")
        output_path = Path(OUTPUT_DIR)
        output_path.mkdir(exist_ok=True)
        print(f"   Dossier: {output_path.absolute()}")
        
        # Sauvegarde du mod√®le au format joblib
        print(f"\nüíæ Sauvegarde du mod√®le...")
        full_output_path = output_path / OUTPUT_FILE
        joblib.dump(model, full_output_path)
        
        print(f"‚úÖ Mod√®le sauvegard√© avec succ√®s!")
        print(f"   Fichier: {full_output_path.absolute()}")
        
        # V√©rification de la taille du fichier
        file_size = full_output_path.stat().st_size / (1024 * 1024)  # Convertir en MB
        print(f"   Taille: {file_size:.2f} MB")
        
        print("\n" + "=" * 60)
        print("üéâ EXTRACTION R√âUSSIE!")
        print("=" * 60)
        print("\nüìã Prochaines √©tapes:")
        print("   1. V√©rifier le fichier: dir artifacts\\best_model.joblib")
        print("   2. Lancer l'application: streamlit run app_streamlit_mlops_gemini.py")
        print("   3. Tester la pr√©diction dans l'onglet üîÆ Pr√©diction")
        print("   4. Commit sur GitHub: git add artifacts/best_model.joblib")
        
        return True
        
    except mlflow.exceptions.MlflowException as e:
        print(f"\n‚ùå ERREUR MLFLOW: {e}")
        print("\nüîß Solutions possibles:")
        print("   1. V√©rifier que MLflow UI est accessible: mlflow ui")
        print("   2. V√©rifier le Run ID fourni par Wa√Ø")
        print("   3. V√©rifier que le dossier mlruns/ existe")
        return False
        
    except Exception as e:
        print(f"\n‚ùå ERREUR INATTENDUE: {e}")
        print(f"   Type d'erreur: {type(e).__name__}")
        return False


def afficher_info_modele():
    """
    Affiche les informations d√©taill√©es du mod√®le depuis MLflow.
    """
    
    try:
        print("\n" + "=" * 60)
        print("üìä INFORMATIONS DU MOD√àLE")
        print("=" * 60)
        
        # Configuration MLflow
        mlflow.set_tracking_uri(MLFLOW_TRACKING_URI)
        
        # R√©cup√©ration des informations du run
        client = mlflow.tracking.MlflowClient()
        run = client.get_run(RUN_ID)
        
        # Affichage des informations g√©n√©rales
        print(f"\nüÜî Run ID: {RUN_ID}")
        print(f"üìÖ Date: {run.info.start_time}")
        print(f"‚è±Ô∏è  Dur√©e: {(run.info.end_time - run.info.start_time) / 1000:.2f}s")
        print(f"‚úÖ Statut: {run.info.status}")
        
        # Affichage des m√©triques
        if run.data.metrics:
            print(f"\nüìà M√©triques de Performance:")
            for key, value in sorted(run.data.metrics.items()):
                print(f"   ‚Ä¢ {key}: {value:.4f}")
        
        # Affichage des param√®tres
        if run.data.params:
            print(f"\n‚öôÔ∏è  Hyperparam√®tres:")
            for key, value in sorted(run.data.params.items()):
                print(f"   ‚Ä¢ {key}: {value}")
        
    except Exception as e:
        print(f"\n‚ö†Ô∏è  Impossible d'afficher les informations: {e}")


# =============================================================================
# EX√âCUTION PRINCIPALE
# =============================================================================

if __name__ == "__main__":
    """
    Point d'entr√©e principal du script.
    """
    
    print("\n")
    print("‚ïî" + "‚ïê" * 58 + "‚ïó")
    print("‚ïë" + " " * 10 + "EXTRACTION MOD√àLE MLFLOW" + " " * 24 + "‚ïë")
    print("‚ïë" + " " * 10 + "Projet MLOps - Paris 1" + " " * 26 + "‚ïë")
    print("‚ïö" + "‚ïê" * 58 + "‚ïù")
    
    # Affichage des informations du mod√®le
    afficher_info_modele()
    
    print("\n")
    
    # Extraction du mod√®le
    success = extraire_modele()
    
    # Code de sortie
    exit(0 if success else 1)
